package bootkube

import (
	"os"
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/templates/common"
)

const (
	etcdServiceEndpointsKubeSystemFileName = "etcd-service-endpoints.yaml.template"
)

var _ asset.Asset = (*EtcdServiceEndpointsKubeSystem)(nil)

// EtcdServiceEndpointsKubeSystem is the constant to represent contents of etcd-service-endpoints.yaml.template file.
type EtcdServiceEndpointsKubeSystem struct {
	file *asset.File
}

// Dependencies returns all of the dependencies directly needed by the asset
func (t *EtcdServiceEndpointsKubeSystem) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Name returns the human-friendly name of the asset.
func (t *EtcdServiceEndpointsKubeSystem) Name() string {
	return "EtcdServiceEndpointsKubeSystem"
}

// Generate generates the actual files by this asset
func (t *EtcdServiceEndpointsKubeSystem) Generate(parents asset.Parents) error {
	data, err := common.GetBootkubeTemplate(etcdServiceEndpointsKubeSystemFileName)
	if err != nil {
		return err
	}
	t.file = &asset.File{
		Filename: filepath.Join(common.TemplateDir, etcdServiceEndpointsKubeSystemFileName),
		Data:     []byte(data),
	}
	return nil
}

// Files returns the files generated by the asset.
func (t *EtcdServiceEndpointsKubeSystem) Files() []*asset.File {
	return []*asset.File{t.file}
}

// Load returns the asset from disk.
func (t *EtcdServiceEndpointsKubeSystem) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(filepath.Join(common.TemplateDir, etcdServiceEndpointsKubeSystemFileName))
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}
	t.file = file
	return true, nil
}
